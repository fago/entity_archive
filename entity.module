<?php
// $Id$

/**
 * @file
 * Module for the entity API.
 */

/**
 * Defines status codes used for exportable entities.
 */

/**
 * A bit flag used to let us know if an entity is in the database.
 */
define('ENTITY_IN_DB', 0x01);

/**
 * A bit flag used to let us know if an entity is a 'default' in code.
 */
define('ENTITY_IN_CODE', 0x02);

/**
 * A bit flag used to mark entities as overridden, e.g. they were originally
 * definded in code and are saved now in the database. Same as
 * (ENTITY_IN_DB | ENTITY_IN_CODE).
 */
define('ENTITY_OVERRIDDEN', 0x03);

/**
 * A bit flag used to mark entities as fixed, thus not changeable for any
 * user.
 */
define('ENTITY_FIXED', 0x04);


require_once DRUPAL_ROOT . '/modules/callbacks.inc';
require_once DRUPAL_ROOT . '/includes/entity.property.inc';


/**
 * Permanently save an entity.
 *
 * In case of failures, an exception is thrown.
 *
 * @param $entity_type
 *   The type of the entity.
 * @param $entity
 *   The entity to save.
 * @return
 *   SAVED_NEW or SAVED_UPDATED is returned depending on the operation
 *   performed. If the given entity type isn't compatible to the CRUD API, FALSE
 *   is returned.
 */
function entity_save($entity_type, $entity) {
  $info = entity_get_info($entity_type);
  if (method_exists($entity, 'save')) {
    return $entity->save();
  }
  elseif (in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
    return entity_get_controller($entity_type)->save($entity);
  }
  else {
    return FALSE;
  }
}

/**
 * Permanently delete the given entity.
 *
 * In case of failures, an exception is thrown.
 *
 * @param $entity_type
 *   The type of the entity.
 * @param $id
 *   The uniform identifier of the entity to delete.
 * @return
 *   FALSE if the given entity type isn't compatible to the CRUD API.
 */
function entity_delete($entity_type, $id) {
  $info = entity_get_info($entity_type);
  if (isset($info['entity class']) && method_exists($info['entity class'], 'delete')) {
    $entities = entity_load($entity_type, array($id));
    reset($entities)->delete();
  }
  elseif (in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
    entity_get_controller($entity_type)->delete(array($id));
  }
  else {
    return FALSE;
  }
}

/**
 * Permanently delete multiple entities.
 *
 * @param $entity_type
 *   The type of the entity.
 * @param $ids
 *   An array of uniform identifiers of the entities to delete.
 * @return
 *   FALSE if the given entity type isn't compatible to the CRUD API.
 */
function entity_delete_multiple($entity_type, $ids) {
  $info = entity_get_info($entity_type);
  if (in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
    entity_get_controller($entity_type)->delete($ids);
  }
  else {
    return FALSE;
  }
}

/**
 * Create a new entity.
 *
 * @param $entity_type
 *   The type of the entity.
 * @param $values
 *   An array of values to set, keyed by property name. If the entity type has
 *   bundles the bundle key has to be specified.
 * @return
 *   A new instance of the entity type or FALSE if the given entity type isn't
 *   compatible to the CRUD API.
 */
function entity_create($entity_type, array $values) {
  $info = entity_get_info($entity_type);
  if (in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
    return entity_get_controller($entity_type)->create($values);
  }
  return FALSE;
}

/**
 * Exports an entity.
 *
 * @param $entity_type
 *   The type of the entity.
 * @param $entity
 *   The entity to export.
 * @param $prefix
 *   An optional prefix for each line.
 * @return
 *   The exported entity as serialized string. The format is determined by the
 *   respective entity controller, e.g. it is JSON for the EntityAPIController.
 *   The output is suitable for entity_import().
 */
function entity_export($entity_type, $entity, $prefix = '') {
  if (method_exists($entity, 'export')) {
    return $entity->export($prefix);
  }
  $info = entity_get_info($entity_type);
  if (in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
    return entity_get_controller($entity_type)->export($entity, $prefix);
  }
}

/**
 * Imports an entity.
 *
 * @param $entity_type
 *   The type of the entity.
 * @param string $export
 *   The string containing the serialized entity as produced by
 *   entity_export().
 * @return
 *   The imported entity object not yet saved.
 */
function entity_import($entity_type, $export) {
  $info = entity_get_info($entity_type);
  if (in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
    return entity_get_controller($entity_type)->import($export);
  }
}

/**
 * Builds a structured array representing the entity's content.
 *
 * The content built for the entity will vary depending on the $view_mode
 * parameter.
 *
 * @param $entity_type
 *   The type of the entity.
 * @param $entity
 *   An entity object.
 * @param $view_mode
 *   A view mode as used by this entity type, e.g. 'full', 'teaser'...
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 * @return
 *   The renderable array.
 */
function entity_build_content($entity_type, $entity, $view_mode = 'full', $langcode = NULL) {
  $info = entity_get_info($entity_type);
  if (method_exists($entity, 'buildContent')) {
    return $entity->buildContent($view_mode, $langcode);
  }
  elseif (in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
    return entity_get_controller($entity_type)->buildContent($entity, $view_mode, $langcode);
  }
}

/**
 * Returns the entity identifier.
 *
 * Unlike entity_extract_ids() this function returns the uniform identifier,
 * thus if a name key is defined, the name of the entity is returned. Otherwise
 * the usual numeric id is returned.
 *
 * @param $entity_type
 *   The type of the entity.
 * @param $entity
 *   An entity object.
 *
 * @see entity_extract_ids()
 */
function entity_id($entity_type, $entity) {
  if (method_exists($entity, 'identifier')) {
    return $entity->identifier();
  }
  $info = entity_get_info($entity_type);
  $key = isset($info['entity keys']['name']) ? $info['entity keys']['name'] : $info['entity keys']['id'];
  return isset($entity->$key) ? $entity->$key : NULL;
}

/**
 * Generate an array for rendering the given entities.
 *
 * @param $entity_type
 *   The type of the entity.
 * @param $entities
 *   An array of entities to render, keyed by their ids. E.g. as returned from
 *   entity_load().
 * @param $view_mode
 *   A view mode as used by this entity type, e.g. 'full', 'teaser'...
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 * @return
 *   The renderable array.
 */
function entity_view($entity_type, $entities, $view_mode = 'full', $langcode = NULL) {
  $info = entity_get_info($entity_type);
  if (in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
    return entity_get_controller($entity_type)->view($entities, $view_mode, $langcode);
  }
}

/**
 * Determines whether the given user has access to an entity.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $entity_type
 *   The entity type of the entity to check for.
 * @param $entity
 *   Optionally an entity to check access for. If no entity is given, it will be
 *   determined whether access is allowed for all entities of the given type.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not. If the entity type does not specify any
 *   access information, NULL is returned.
 */
function entity_access($op, $entity_type, $entity = NULL, $account = NULL) {
  if (($info = entity_get_info()) && isset($info[$entity_type]['access callback'])) {
    return $info[$entity_type]['access callback']($op, $entity, $account, $entity_type);
  }
}

/**
 * Returns an array of entity info for the entity types provided via the entity CRUD API.
 */
function entity_crud_get_info() {
  $types = array();
  foreach (entity_get_info() as $type => $info) {
    if (isset($info['controller class']) && in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
      $types[$type] = $info;
    }
  }
  return $types;
}

/**
 * Checks if a given entity has a certain status.
 *
 * @param $entity_type
 *   The type of the entity.
 * @param $entity
 *   The entity to check the status on.
 * @param $status
 *   The constant status like ENTITY_IN_DB, ENTITY_IN_CODE, ENTITY_OVERRIDDEN
 *   or ENTITY_FIXED.
 *
 * @return
 *   TRUE if the entity has the status, FALSE otherwise.
 */
function entity_has_status($entity_type, $entity, $status) {
  $info = entity_get_info($entity_type);
  $status_key = empty($info['entity keys']['status']) ? 'status' : $info['entity keys']['status'];
  return isset($entity->{$status_key}) && ($entity->{$status_key} & $status) == $status;
}

/**
 * Export a variable. Copied from ctools.
 *
 * This is a replacement for var_export(), allowing us to more nicely
 * format exports. It will recurse down into arrays and will try to
 * properly export bools when it can.
 */
function entity_var_export($var, $prefix = '') {
  if (is_array($var)) {
    if (empty($var)) {
      $output = 'array()';
    }
    else {
      $output = "array(\n";
      foreach ($var as $key => $value) {
        $output .= "  '$key' => " . entity_var_export($value, '  ') . ",\n";
      }
      $output .= ')';
    }
  }
  else if (is_bool($var)) {
    $output = $var ? 'TRUE' : 'FALSE';
  }
  else {
    $output = var_export($var, TRUE);
  }

  if ($prefix) {
    $output = str_replace("\n", "\n$prefix", $output);
  }
  return $output;
}

/**
 * Export a variable in pretty formatted JSON.
 */
function entity_var_json_export($var, $prefix = '') {
  if (is_array($var) && $var) {
    // Defines whether we use a JSON array or object.
    $use_array = ($var == array_values($var));
    $output = $use_array ? "[" : "{";

    foreach ($var as $key => $value) {
      if ($use_array) {
        $values[] = entity_var_json_export($value, '  ');
      }
      else {
        $values[] = entity_var_json_export((string) $key, '  ') . ' : ' . entity_var_json_export($value, '  ');
      }
    }
    // Use several lines for long content. However for objects with a single
    // entry keep the key in the first line.
    if (strlen($content = implode(", ", $values)) > 70 && ($use_array || count($values) > 1)) {
      $output .= "\n  " .  implode(",\n  ", $values) . "\n";
    }
    elseif (strpos($content, "\n") !== FALSE) {
      $output .= " " .  $content . "\n";
    }
    else {
      $output .= " " .  $content . " ";
    }
    $output .= $use_array ? "]" : "}";
  }
  else {
    $output = drupal_json_encode($var);
  }

  if ($prefix) {
    $output = str_replace("\n", "\n$prefix", $output);
  }
  return $output;
}

/**
 * Implements hook_modules_enabled().
 *
 * Invokes hook_entity_enabled() for new default entities.
 */
function entity_modules_enabled($modules) {
  foreach (entity_crud_get_info() as $entity_type => $info) {
    if (!empty($info['exportable']) && $entities = _entity_modules_get_defaults($entity_type, $modules)) {
      module_invoke_all($entity_type . '_enabled', $entities);
      module_invoke_all('entity_enabled', $entities, $entity_type);
    }
  }
}

/**
 * Implements hook_modules_disabled().
 *
 * Invokes hook_entity_disabled() for new default entities.
 */
function entity_modules_disabled($modules) {
  foreach (entity_crud_get_info() as $entity_type => $info) {
    if (!empty($info['exportable']) && $entities = _entity_modules_get_defaults($entity_type, $modules)) {
      module_invoke_all($entity_type . '_disabled', $entities);
      module_invoke_all('entity_disabled', $entities, $entity_type);
      // Make sure the cache is cleared afterwards, so removed default entities
      // are not left there.
      entity_get_controller($entity_type)->resetCache();
    }
  }
}

function _entity_modules_get_defaults($entity_type, $modules) {
  $info = entity_get_info($entity_type);
  $entities = array();
  $hook = isset($info['export']['default hook']) ? $info['export']['default hook'] : 'default_' . $entity_type;
  $module_key = isset($info['entity keys']['module']) ? $info['entity keys']['module'] : 'module';
  // Collect the ids of all new entities.
  foreach ($modules as $module) {
    if (module_hook($module, $hook)) {
      $result = module_invoke($module, $hook);
      if ($result && is_array($result)) {
        $entities += $result;
      }
    }
  }
  if ($ids = array_keys($entities)) {
    // To make sure the new default entities are retrieved, make sure the cache
    // is cleared.
    entity_get_controller($entity_type)->resetCache();
    // Check whether some of the new entities are already overridden.
    $entities = array();
    foreach (entity_load($entity_type, $ids) as $id => $entity) {
      if (!entity_has_status($entity_type, $entity, ENTITY_OVERRIDDEN)) {
        $entities[$id] = $entity;
      }
    }
    return $entities;
  }
}

/**
 * Implements hook_theme().
 */
function entity_theme() {
  return array(
    'entity_status' => array(
      'variables' => array('status' => NULL, 'html' => TRUE),
    ),
    'entity' => array(
      'render element' => 'elements',
      'template' => 'entity',
    ),
    'entity_ui_overview_item' => array(
      'variables' => array('label' => NULL, 'entity_type' => NULL, 'url' => FALSE, 'name' => FALSE),
      'file' => 'includes/entity.ui.inc'
    ),
  );
}

/**
 * Themes the exportable status of an entity.
 */
function theme_entity_status($variables) {
  $status = $variables['status'];
  $html = $variables['html'];
  if ($status & ENTITY_FIXED) {
    $label = t('Fixed');
    $help = t('The configuration is fixed and cannot be changed.');
    return $html ? "<span class='entity-status-fixed' title='$help'>" . $label . "</span>" : $label;
  }
  elseif (($status & ENTITY_OVERRIDDEN) == ENTITY_OVERRIDDEN) {
    $label = t('Overridden');
    $help = t('This configuration is provided by a module, but has been changed.');
    return $html ? "<span class='entity-status-overridden' title='$help'>" . $label . "</span>" : $label;
  }
  elseif ($status & ENTITY_IN_CODE) {
    $label = t('Default');
    $help = t('A module provides this configuration.');
    return $html ? "<span class='entity-status-default' title='$help'>" . $label . "</span>" : $label;
  }
  elseif ($status & ENTITY_IN_DB) {
    $label = t('Custom');
    $help = t('A custom configuration by a user.');
    return $html ? "<span class='entity-status-custom' title='$help'>" . $label . "</span>" : $label;
  }
}

/**
 * Process variables for entity.tpl.php.
 */
function template_preprocess_entity(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $entity_type = $variables['elements']['#entity_type'];
  $variables['entity_type'] = $entity_type;
  $entity = $variables['elements']['#entity'];
  $variables[$variables['elements']['#entity_type']] = $entity;
  $info = entity_get_info($entity_type);

  $variables['title'] = check_plain(entity_label($entity_type, $entity));
  $uri = entity_uri($entity_type, $entity);
  $variables['url'] = $uri ? url($uri['path'], $uri['options']) : FALSE;
  $variables['page'] = $uri && $uri['path'] == $_GET['q'];

  // Helpful $content variable for templates.
  $variables['content'] = array();
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  if (!empty($info['fieldable'])) {
    // Make the field variables available with the appropriate language.
    field_attach_preprocess($entity_type, $entity, $variables['content'], $variables);
  }
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);

  // Gather css classes.
  $variables['classes_array'][] = drupal_html_class('entity-' . $entity_type);
  $variables['classes_array'][] = drupal_html_class($entity_type . '-' . $bundle);

  // Add suggestions.
  $variables['theme_hook_suggestions'][] = $entity_type;
  $variables['theme_hook_suggestions'][] = $entity_type . '__' . $bundle;
  if ($id = entity_id($entity_type, $entity)) {
    $variables['theme_hook_suggestions'][] = $entity_type . '__' . $id;
  }
}

/**
 * Label callback that refers to the entity classes label method.
 */
function entity_class_label($entity) {
  return $entity->label();
}

/**
 * URI callback that refers to the entity classes uri method.
 */
function entity_class_uri($entity) {
  return $entity->uri();
}

/**
 * Implements hook_file_download_access() for entity types provided by the CRUD API.
 */
function entity_file_download_access($field, $entity_type, $entity) {
  $info = entity_get_info($entity_type);
  if (in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
    return entity_access('view', $entity_type, $entity);
  }
}

/**
 * Determines the UI controller class for a given entity type.
 *
 * @return EntityDefaultUIController
 *   If a type is given, the controller for the given entity type. Else an array
 *   of all enabled UI controllers keyed by entity type is returned.
 */
function entity_ui_controller($type = NULL) {
  $static = &drupal_static(__FUNCTION__);
  $all = &drupal_static(__FUNCTION__);

  if (isset($type) && !isset($static[$type])) {
    $info = entity_get_info($type);
    $class = isset($info['admin ui']['controller class']) ? $info['admin ui']['controller class'] : 'EntityDefaultUIController';
    $static[$type] = (isset($info['admin ui']['path']) && $class) ? new $class($type, $info) : FALSE;
  }
  if (!isset($type) && !isset($all)) {
    // Invoke the function for each type to ensure we have fully populated the
    // static variable $static.
    foreach (entity_get_info() as $entity_type => $info) {
      $all[$entity_type] = entity_ui_controller($entity_type);
    }
  }
  if ($type) {
    return isset($static[$type]) ? $static[$type] : FALSE;
  }
  return array_filter($static);
}

/**
 * Implements hook_menu().
 *
 * @see EntityDefaultUIController::hook_menu()
 */
function entity_menu() {
  $items = array();
  foreach (entity_ui_controller() as $controller) {
    $items += $controller->hook_menu();
  }
  return $items;
}

/**
 * Implements hook_forms().
 *
 * @see EntityDefaultUIController::hook_forms()
 * @see entity_ui_get_form()
 */
function entity_forms($form_id, $args) {
  // For efficiency only invoke an entity types controller, if a form of it is
  // requrested. Thus if the first (overview and operation form) or the third
  // argument (edit form) is an entity type name, add in the types forms.
  if (isset($args[0]) && is_string($args[0]) && entity_get_info($args[0])) {
    $type = $args[0];
  }
  elseif (isset($args[2]) && is_string($args[2]) && entity_get_info($args[2])) {
    $type = $args[2];
  }
  if (isset($type) && $controller = entity_ui_controller($type)) {
    return $controller->hook_forms();
  }
}

/**
 * Gets an entity form.
 *
 * This function may be used by entities to build their entity form. It has to
 * be used instead of calling drupal_get_form().
 * Entity forms built with this helper receive useful defaults suiting for
 * editing a single entity, whereas the special cases of adding and cloning
 * of entities are supported too.
 *
 * While this function is intended to be used to get entity forms for entities
 * using the entity ui controller, it may be used for entity types not using
 * the ui controller too.
 *
 * @param $entity_type
 *   The entity type for which to get the form.
 * @param $entity
 *   The entity for which to return the form.
 *   If $op is 'add' the entity has to be either initialized before calling this
 *   function, or NULL may be passed. If NULL is passed, an entity will be
 *   initialized with empty values using entity_create(). Thus entities, for
 *   which this is problematic have to care to pass in an initialized entity.
 * @param $op
 *   One of 'edit', 'add' or 'clone'. Defaults to edit.
 *
 * @return
 *   The fully built and processed form, ready to be rendered.
 *
 * @see EntityDefaultUIController::hook_forms()
 * @see entity_ui_form_submit_build_entity()
 */
function entity_ui_get_form($entity_type, $entity, $op = 'edit') {
  if (isset($entity)) {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  }
  $form_id = (!isset($bundle) || $bundle == $entity_type) ? $entity_type . '_form' : $entity_type . '_edit_' . $bundle . '_form';

  if (!isset($entity) && $op == 'add') {
    $entity = entity_create($entity_type, array());
  }

  // Do not use drupal_get_form(), but invoke drupal_build_form() ourself so
  // we can prepulate the form state.
  $form_state['wrapper_callback'] = 'entity_ui_main_form_defaults';
  $form_state['entity_type'] = $entity_type;
  // We don't pass the entity type as first parameter, as the implementing
  // module knows the type anyway. However, in order to allow for efficient
  // hook_forms() implementiations we append the entity type as last argument,
  // which the module implementing the form constructor may safely ignore.
  // @see entity_forms()
  $form_state['build_info']['args'] = array($entity, $op, $entity_type);
  module_load_include('inc', 'entity', 'includes/entity.ui');
  return drupal_build_form($form_id, $form_state);
}
