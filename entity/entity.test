<?php
// $Id$

/**
 * @file
 * Entity CRUD API tests.
 */

/**
 * Test basic API.
 */
class EntityAPITestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity CRUD',
      'description' => 'Tests basic CRUD API functionality.',
      'group' => 'Entity API',
    );
  }

  function setUp() {
    parent::setUp('entity', 'entity_test');
  }

  /**
   * Tests CRUD.
   */
  function testCRUD() {
    module_enable(array('entity_feature'));

    $user1 = $this->drupalCreateUser();
    // Create test entities for the user1 and unrelated to a user.
    $entity = entity_create('entity_test', array('name' => 'test', 'uid' => $user1->uid));
    $entity->save();
    $entity = entity_create('entity_test', array('name' => 'test2', 'uid' => $user1->uid));
    $entity->save();
    $entity = entity_create('entity_test', array('name' => 'test', 'uid' => NULL));
    $entity->save();

    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test')));

    $this->assertEqual($entities[0]->name, 'test', 'Created and loaded entity.');
    $this->assertEqual($entities[1]->name, 'test', 'Created and loaded entity.');

    $results = entity_test_load_multiple(array($entity->pid));
    $loaded = array_pop($results);
    $this->assertEqual($loaded->pid, $entity->pid, 'Loaded the entity unrelated to a user.');

    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test2')));
    $entities[0]->delete();
    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test2')));
    $this->assertEqual($entities, array(), 'Entity successfully deleted.');

    $entity->save();
    $this->assertEqual($entity->pid, $loaded->pid, 'Entity successfully updated.');

    // Try deleting multiple test entities by deleting all.
    $pids = array_keys(entity_test_load_multiple(FALSE));
    entity_test_delete_multiple($pids);
  }

  /**
   * Tests CRUD API functions: entity_(create|delete|save)
   */
  function testCRUDAPIfunctions() {
    module_enable(array('entity_feature'));

    $user1 = $this->drupalCreateUser();
    // Create test entities for the user1 and unrelated to a user.
    $entity = entity_create('entity_test', array('name' => 'test', 'uid' => $user1->uid));
    entity_save('entity_test', $entity);
    $entity = entity_create('entity_test', array('name' => 'test2', 'uid' => $user1->uid));
    entity_save('entity_test', $entity);
    $entity = entity_create('entity_test', array('name' => 'test', 'uid' => NULL));
    entity_save('entity_test', $entity);

    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test')));
    $this->assertEqual($entities[0]->name, 'test', 'Created and loaded entity.');
    $this->assertEqual($entities[1]->name, 'test', 'Created and loaded entity.');

    $results = entity_test_load_multiple(array($entity->pid));
    $loaded = array_pop($results);
    $this->assertEqual($loaded->pid, $entity->pid, 'Loaded the entity unrelated to a user.');

    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test2')));

    entity_delete('entity_test', $entities[0]->pid);
    $entities = array_values(entity_test_load_multiple(FALSE, array('name' => 'test2')));
    $this->assertEqual($entities, array(), 'Entity successfully deleted.');

    entity_save('entity_test', $entity);
    $this->assertEqual($entity->pid, $loaded->pid, 'Entity successfully updated.');

    // Try deleting multiple test entities by deleting all.
    $pids = array_keys(entity_test_load_multiple(FALSE));
    entity_delete_multiple('entity_test', $pids);
  }

  /**
   * Test loading entities defined in code.
   */
  function testExportables() {
    module_enable(array('entity_feature'));

    $types = entity_load('entity_test_type', array('test', 'test2'));
    $this->assertEqual($types['test']->label, 'label', 'Default type loaded.');
    $this->assertTrue($types['test']->status & ENTITY_IN_CODE && !($types['test']->status & ENTITY_IN_DB), 'Default type status is correct.');

    // Test using a condition, which has to be applied on the defaults.
    $types = entity_load('entity_test_type', FALSE, array('label' => 'label'));
    $this->assertEqual($types['test']->label, 'label', 'Condition to default type applied.');

    $types['test']->label = 'modified';
    $types['test']->save();

    // Ensure loading the changed entity works.
    $types = entity_load('entity_test_type', FALSE, array('label' => 'modified'));
    $this->assertEqual($types['test']->label, 'modified', 'Modified type loaded.');

    // Clear the cache to simulate a new page load.
    entity_get_controller('entity_test_type')->resetCache();

    // Test loading using a condition again, now they default may not appear any
    // more as it's overridden by an entity with another label.
    $types = entity_load('entity_test_type', FALSE, array('label' => 'label'));
    $this->assertTrue(empty($types), 'Conditions are applied to the overridden entity only.');

    // But the overridden entity has to appear with another condition.
    $types = entity_load('entity_test_type', FALSE, array('label' => 'modified'));
    $this->assertEqual($types['test']->label, 'modified', 'Modified default type loaded by condition.');

    $types = entity_load('entity_test_type', array('test', 'test2'));
    $this->assertEqual($types['test']->label, 'modified', 'Modified default type loaded by id.');
    $this->assertTrue($types['test']->status & ENTITY_IN_CODE && $types['test']->status & ENTITY_IN_DB, 'Status of modified type is correct.');

    // Test loading an exportable by its numeric id.
    $result = entity_load('entity_test_type', array($types['test']->id));
    $this->assertTrue(isset($result['test']), 'Exportable entity loaded by the numeric id.');

    // Test exporting an entity to JSON.
    $serialized_string = $types['test']->export();
    $data = drupal_json_decode($serialized_string);
    $this->assertNotNull($data, 'Exported entity is valid JSON.');
    $import = entity_import('entity_test_type', $serialized_string);
    $this->assertTrue(get_class($import) == get_class($types['test']) && $types['test']->label == $import->label, 'Successfully exported entity to code.');
    $this->assertTrue(!isset($import->status), 'Exportable status has not been exported to code.');
  }

  /**
   * Tests hook_entity_enabled() and hook_entity_disabled().
   */
  function testExportablesActivation() {
    $_SESSION['entity_hook_test'] = array();
    // Enabling the module should invoke the enabled hook for the other
    // entities provided in code.
    module_enable(array('entity_feature'));

    $all = array('main', 'test', 'test2');
    $this->assertTrue($_SESSION['entity_hook_test']['entity_enabled'] == array($all), 'Hook entity_enabled has been invoked.');
    $this->assertTrue($_SESSION['entity_hook_test']['entity_test_type_enabled'] == array($all), 'Hook entity_test_type_enabled has been invoked.');

    // Add a new test entity in DB and make sure the hook is invoked too.
    $test3 = entity_create('entity_test_type', array(
      'name' => 'test3',
      'label' => 'label',
      'weight' => 0,
    ));
    $test3->save();
    $this->assertTrue($_SESSION['entity_hook_test']['entity_enabled'] == array($all, array('test3')), 'Hook entity_enabled has been invoked.');
    $this->assertTrue($_SESSION['entity_hook_test']['entity_test_type_enabled'] == array($all, array('test3')), 'Hook entity_test_type_enabled has been invoked.');

    // Now override the 'test' entity and make sure it doesn't invoke the
    // enabling hook as it is already enabled. Then make sure it stays enabled
    // when the feature module is disabled.
    $result = entity_load('entity_test_type', array('test'));
    $result['test']->label = 'modified';
    $result['test']->save();

    $this->assertTrue($_SESSION['entity_hook_test']['entity_enabled'] == array($all, array('test3')), 'Hook entity_enabled has been invoked.');
    $this->assertTrue($_SESSION['entity_hook_test']['entity_test_type_enabled'] == array($all, array('test3')), 'Hook entity_test_type_enabled has been invoked.');

    // 'test' has to remain enabled, as it has been overridden.
    $all = array('main', 'test2');
    module_disable(array('entity_feature'));

    $this->assertTrue($_SESSION['entity_hook_test']['entity_disabled'] == array($all), 'Hook entity_disabled has been invoked.');
    $this->assertTrue($_SESSION['entity_hook_test']['entity_test_type_disabled'] == array($all), 'Hook entity_test_type_disabled has been invoked.');

    // Now make sure 'test' is not overridden any more, but custom.
    $result = entity_load('entity_test_type', array('test'));
    $this->assertTrue(!entity_has_status('entity_test_type', $result['test'], ENTITY_OVERRIDDEN), 'Entity is not marked as overridden any more.');

    // Test disabled hook for deleting the remaining entities from DB.
    entity_delete_multiple('entity_test_type', array('test', 'test3'));
    $all2 = array('test', 'test3');
    $this->assertTrue($_SESSION['entity_hook_test']['entity_disabled'] == array($all, $all2), 'Hook entity_disabled has been invoked.');
    $this->assertTrue($_SESSION['entity_hook_test']['entity_test_type_disabled'] == array($all, $all2), 'Hook entity_test_type_disabled has been invoked.');
  }

  /**
   * Tests viewing entites.
   */
  function testRendering() {
    module_enable(array('entity_feature'));

    $user1 = $this->drupalCreateUser();
    // Create test entities for the user1 and unrelated to a user.
    $entity = entity_create('entity_test', array('name' => 'test', 'uid' => $user1->uid));

    $render = $entity->view();
    $output = drupal_render($render);
    // The entity class adds the user name to the output. Verify it is there.
    $this->assertTrue(strpos($output, format_username($user1)) !== FALSE, 'Entity has been rendered');
  }
}

/**
 * Test the generated Rules integration.
 */
class EntityAPIRulesIntegrationTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity CRUD Rules integration',
      'description' => 'Tests the Rules integration provided by the Entity CRUD API.',
      'group' => 'Entity API',
      // Unfortunately the drupal.org testing bot doesn't pick that up yet, so
      // this test is excluded from the automated tests. See #924090.
      'dependencies' => array('rules'),
    );
  }

  function setUp() {
    parent::setUp('entity', 'entity_test', 'rules');
  }

  /**
   * Test the events.
   */
  function testEvents() {
    $rule = rules_reaction_rule();
    $rule->event('entity_test_presave');
    $rule->event('entity_test_insert');
    $rule->event('entity_test_update');
    $rule->event('entity_test_delete');
    $rule->action('drupal_message', array('message' => 'hello!'));
    $rule->save();
    rules_clear_cache(TRUE);

    // Let the events occur.
    $user1 = $this->drupalCreateUser();
    $entity = entity_create('entity_test', array('name' => 'test', 'uid' => $user1->uid));
    $entity->save();
    $entity->name = 'update';
    $entity->save();
    $entity->delete();

    // Now there should have been 5 events, 2 times presave and once insert,
    // update and delete.

    $count = substr_count(RulesLog::logger()->render(), '0 ms Reacting on event');
    $this->assertTrue($count == 5, 'Events have been properly invoked.');
    RulesLog::logger()->checkLog();
  }

}
